<div class="container">
  <div class="row">
    <div class="col-3">
      <%= render 'layouts/info' %>
    </div>
    <div class="col-6">
      <div class="d-flex bd-highlight m-2">
        <div class="text-center">
          <%= image_tag @user.get_profile_image, size: '100x100', class: "rounded-circle" %>
          <br>
          Lv. <%= @user.level %>
        </div>
        <div class="d-flex align-items-end h3 ml-2 mb-4">
          <%= @user.name %>
        </div>
        <div class="d-flex align-items-end text-muted ml-2 mb-4">
          <%= @user.account_name %>
        </div>
        <dvi class="ml-auto p-2 bd-highlight">
          <% if @user == current_user %>
            <!-- モーダル表示のためのボタン -->
            <button class="btn btn-primary" data-toggle="modal" data-target="#modal-user-edit">
              編集
            </button>
            <%= render 'edit', user: @user %>
          <% else %>
            <% if current_user.following?(@user) %>
              <%= link_to "フォロー中", user_relationships_path(@user), method: :delete, class: "btn btn-primary" %>
            <% else %>
              <%= link_to "フォローする", user_relationships_path(@user), method: :post, class: "btn btn-success" %>
            <% end %>
          <% end %>
        </dvi>
      </div>
      <div>
        自己紹介
        <br>
        <%= @user.posts.count %>
        <%= @user.favorites.count %>
        <%= @user.introduction %>
      </div>
      <div class="d-flex justify-content-around">
        <div>
          <%= link_to user_followings_path(@user) do %>
            フォロー中 <%= @user.followings.count %>
          <% end %>
        </div>
        <div>
          <%= link_to user_followers_path(@user) do %>
            フォロワー <%= @user.followers.count %>
          <% end %>
        </div>
      </div>
      <% if can_view_profile?(current_user, @user) %>
        <div class="mt-3">
          <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
              <a class="nav-link active" id="tab1-tab" data-toggle="tab" href="#tab1" role="tab" aria-controls="tab1" aria-selected="true">投稿</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" id="tab2-tab" data-toggle="tab" href="#tab2" role="tab" aria-controls="tab2" aria-selected="false">いいね</a>
            </li>
          </ul>
        
          <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="tab1" role="tabpanel" aria-labelledby="tab1-tab">
              <div class="posts-scroll" style="overflow-y: scroll; height: 500px;">
                <%= render 'public/posts/index', posts: @posts %>
              </div>
            </div>
            <div class="tab-pane fade" id="tab2" role="tabpanel" aria-labelledby="tab2-tab">
              <div class="favorite-list" style="overflow-y: scroll; height: 500px;">
                <%= render 'public/posts/favorited-list', visible_favorite_posts: @visible_favorite_posts %>
              </div>
            </div>
          </div>
        </div>
      <% else %>
        <div class="text-center">
          <div>
            <%= @user.name %>の投稿はフォローしないと見れません。
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>


<script>
  $(document).ready(function() {
    
    // 投稿の無限スクロール設定
    $('.posts-scroll').jscroll({
      contentSelector: '.posts-scroll',
      nextSelector: 'span.next:last a',
      loadingHtml: '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading...</div>',
      callback: function() {
        setHoverBackgroundColor(); // 新しい要素が読み込まれた後に背景色を適用
      }
    });
  
    // いいねリストの無限スクロール設定
    $('.favorite-list').jscroll({
      contentSelector: '.favorite-list',
      nextSelector: 'span.next:last a',
      loadingHtml: '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading...</div>',
      callback: function() {
        setHoverBackgroundColor(); // 新しい要素が読み込まれた後に背景色を適用
      }
    });
  
    // ウィンドウのリサイズ時にコンテナの高さを調整
    $(window).on('resize', function() {
      adjustContainerHeight();
    });
  
    // 初期表示時にコンテナの高さを調整
    adjustContainerHeight();
  
    // マウスオーバー時の背景色を設定する関数
    function setHoverBackgroundColor() {
      $('.post-item').hover(
        function() {
          $(this).css('background-color', 'rgba(192, 192, 192, 0.1)');
        },
        function() {
          $(this).css('background-color', '');
        }
      );
    }
    
    // 初期表示時にマウスオーバー時の背景色を設定
    setHoverBackgroundColor();
  
    // コンテナの高さを調整する関数
    function adjustContainerHeight() {
      var windowHeight = $(window).height();
      var containerHeight = windowHeight - $('.posts-scroll').offset().top;
      $('.posts-scroll').css('height', containerHeight + 'px');
    }
  });
</script>
